
WebPack 4

Install:
    npm init -y                                     (package.json)
    npm i -D webpack@4.x  webpack-cli@3.x           (WebPack)
    npm i -D style-loader@2.x css-loader@5.x        (CSS)
    npm i -D sass-loader@10.x node-sass@4.x         (SCSS)
    npm i -D file-loader                            (Images and Fonts)
    
    npm i -D babel-loader @babel/core               (Babel)
    npm i -D @babel/preset-env                      (Babel)

    npm i -D html-webpack-plugin@4                  (HtmlWebpackPlugin)
    npm i -D mini-css-extract-plugin@1.x            (MiniCssExtractPlugin
    npm i -D clean-webpack-plugin                   (CleanWebpackPlugin)

    npm i -D webpack-dev-server                     (WebPack Dev Server)

    npm i -D eslint                                 (ESLint)
    Package.js:
        "lint" : "eslint --init"                    (.eslintrc.json)

    npm install -D bootstrap@4.6.x		    (Bootstrap v4)
        Use: 
            @import "~bootstrap/scss/bootstrap";


Create:
    src directory
    webpack.config.js
    

package.json:
    "private": true,

    "start": "webpack --mode=development",
    "build": "webpack --mode=production",
    "watch": "webpack-dev-server --mode=development",
    "lint" : "eslint ./src"

    "sass": "node-sass -o src/css src/scss",
    "sass-w": "node-sass -o src/css src/scss -w"




New HTML Page:

    1- HTML file: 
            <title> <%= htmlWebpackPlugin.options.title %> </title>

    2- JS for HTML

    3- SASS or CSS for HTML 


    4- webpack.config.js: 
            entry: {
                nameJS: './src/nameJs',
            },

            new HtmlWebpackPlugin({
                title: 'Title page',
                template: 'namePage.html',    //name template
                filename: 'namePage.html',    //name html file
                chunks: ['name', 'name2']  // all js,css and scss = name, name2
            }),

____________________________________________________________________________________________


webpack.config.js:

const HtmlWebpackPlugin  = require('html-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

const path = require('path');
const { ProgressPlugin } = require('webpack'); 

const config = {
    entry: {
        bundle : './src/index',
        aboutUs: './src/aboutUs'
    },
    output: {
        path: path.join(__dirname, 'dist'),
    },
    optimization: {
        splitChunks: {
            chunks: 'all'  //look at to all js files and create vendors.js
        }
    },
    // stats: 'errors-warnings',
    module: {
        rules: [
            {
                test: /\.(png|jpe?g|gif)$/i,   
                use: [
                    {
                        loader: 'file-loader',
                        options: {
                            publicPath: 'images',  //dist/images => images
                            outputPath: 'images',
                            name: '[name].[ext]'
                        }
                    },
                ],
            },
            {
                test: /\.(eot|ttf|woff|woff2|)$/i,
                use: [
                    {
                        loader: 'file-loader',
                        options: {
                            publicPath: 'fonts',    //dist/fonts => fonts
                            outputPath: 'fonts',
                            name: '[name].[ext]',
                        },
                    },
                ],
            },
            {
                test: /\.m?js$/,
                exclude: /node_modules/,
                use: {
                    loader: "babel-loader",
                    options: {
                    presets: ['@babel/preset-env']
                    }
                }
            }
        ],
    },
    plugins: [
        new HtmlWebpackPlugin({
            title: 'Hafiz is Coding | Home page',
            template: 'index.html',     //name template
            filename: 'index.html',     //name html file
            chunks: ['bundle']          //all js,css and scss are name bundle
        }),
        new HtmlWebpackPlugin({
            title: 'Hafiz is Coding | About us',
            template: 'aboutUs.html',      //name template
            filename: 'aboutUs.html',      //name html file
            chunks: ['aboutUs']             //all js,css and scss are name about-us
        }),
        new CleanWebpackPlugin(),
        new ProgressPlugin()
    ],
}


module.exports = (env , {mode})=>{
    console.log('Mode: '+ mode);

    //Notification Plugin
    // config.plugins.push(
    //     new Notification({
    //         mode: mode,
    //     }),
    // );

    let devMode = mode ==='development';

    // DevelopmentMode
    if(devMode){
        //Dev server 
        config.devServer = {
            contentBase: path.join(__dirname, 'dist'),
            index: 'index.html',
            port: 9000,
        }
        //Stats
        config.stats = 'normal'
    }

    // CSS and SASS(style.loader or MiniCssExtractPlugin.loader)
    config.module.rules.push(...[
        {
            test: /\.css$/i,
            use: [devMode ? 'style-loader' : MiniCssExtractPlugin.loader, "css-loader"], 
        },
        {
            test: /\.s[ac]ss$/i,  // /\.(scss|sass)$/i  
            use: [devMode ? 'style-loader' : MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
        },
    ]);

    //  ProductionMode
    if(!devMode){
        //Output (Contenthash)
        config.output.filename = '[name].[contenthash].js';
        //MiniCssExtractPlugin
        config.plugins.push(
            new MiniCssExtractPlugin({
                filename: '[name].[contenthash].css'
            }),
        );
        //Stats
        config.stats = 'errors-only';
    }

    return config;
};



____________________________________________________________________________________________

